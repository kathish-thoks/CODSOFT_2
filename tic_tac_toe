import math

# =========================
# Tic-Tac-Toe Game
# Student-style simple code
# =========================

# Scores for multiple rounds
human_score = 0
ai_score = 0
draws = 0

# Function to create new empty board
def new_board():
    return [' ' for _ in range(9)]

# Function to print board
def print_board(board):
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("---------")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("---------")
    print(f"{board[6]} | {board[7]} | {board[8]}")

# Function to check if a player wins
def check_winner(board, player):
    win_conditions = [
        [0,1,2], [3,4,5], [6,7,8],  # rows
        [0,3,6], [1,4,7], [2,5,8],  # columns
        [0,4,8], [2,4,6]            # diagonals
    ]
    for cond in win_conditions:
        if board[cond[0]] == board[cond[1]] == board[cond[2]] == player:
            return True
    return False

# Function to check draw
def is_draw(board):
    return ' ' not in board

# Function to find empty cells
def empty_cells(board):
    return [i for i, cell in enumerate(board) if cell == ' ']

# Minimax algorithm (simple AI)
def minimax(board, is_maximizing):
    if check_winner(board, 'O'):  # AI wins
        return 1
    if check_winner(board, 'X'):  # Human wins
        return -1
    if is_draw(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in empty_cells(board):
            board[i] = 'O'
            score = minimax(board, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
        return best_score
    else:
        best_score = math.inf
        for i in empty_cells(board):
            board[i] = 'X'
            score = minimax(board, True)
            board[i] = ' '
            if score < best_score:
                best_score = score
        return best_score

# AI move function
def ai_move(board):
    best_score = -math.inf
    move = None
    for i in empty_cells(board):
        board[i] = 'O'
        score = minimax(board, False)
        board[i] = ' '
        if score > best_score:
            best_score = score
            move = i
    board[move] = 'O'
    print(f"\nAI chooses position {move} ")

# Human move function
def human_move(board):
    while True:
        try:
            move = int(input("Enter your move (0-8): "))
            if move in empty_cells(board):
                board[move] = 'X'
                break
            else:
                print("Oops! Cell already taken, try again")
        except:
            print("Please enter a number from 0 to 8.")

# Main game loop
while True:
    board = new_board()
    print("\n=== New Round! ===")
    print("Board positions: 0-8 like this:")
    print("0 | 1 | 2\n3 | 4 | 5\n6 | 7 | 8\n")

    while True:
        print_board(board)
        human_move(board)
        if check_winner(board, 'X'):
            print_board(board)
            print("You win this round!")
            human_score += 1
            break
        if is_draw(board):
            print_board(board)
            print("üòê This round is a draw!")
            draws += 1
            break

        ai_move(board)
        if check_winner(board, 'O'):
            print_board(board)
            print("AI wins this round!")
            ai_score += 1
            break
        if is_draw(board):
            print_board(board)
            print("This round is a draw!")
            draws += 1
            break

    print(f"\nScores: You {human_score} - AI {ai_score} | Draws: {draws}")
    again = input("\nDo you want to play again? (y/n): ").lower()
    if again != 'y':
        print("\nThanks for playing! Final Scores:")
        print(f"You: {human_score} | AI: {ai_score} | Draws: {draws}")
        break
